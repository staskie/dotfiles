(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("MELPA Stable" . "https://stable.melpa.org/packages/") t)

(add-to-list 'load-path "~/.emacs.d/vendor")

(setq package-enable-at-startup nil)
(package-initialize)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(js-indent-level 2)
 '(org-agenda-files (quote ("~/working/notes/testing.org")))
 '(package-selected-packages
   (quote
    (flycheck dash-functional git-link clojure-mode cider linum-relative dirtree helm-projectile flx-ido exec-path-from-shell ag web-mode coffee-mode projectile key-chord evil-indent-textobject evil-surround evil-leader use-package ## helm evil-visual-mark-mode)))
 '(safe-local-variable-values (quote ((encoding . utf-8))))
 '(web-mode-attr-indent-offset 2)
 '(web-mode-code-indent-offset 2)
 '(web-mode-css-indent-offset 2)
 '(web-mode-markup-indent-offset 2)
 '(web-mode-sql-indent-offset 2))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;; awesome search
(require 'helm-config)
(helm-mode 0)

;; disable tab indentation
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq tab-width 2)

;;
(defun copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                    default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))

;;; init-evil.el -- My evil mode configuration.
;;; Commentary:
;;; Code:
(defun air--config-evil-leader ()
  "Configure evil leader mode."
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    "#"  'server-edit
    ","  'other-window
    "."  'mode-line-other-buffer
    ":"  'eval-expression
    "#"  'server-edit
    "aa" 'align-regexp
    "a=" 'my-align-single-equals
    ;;"b"  'helm-mini             ;; Switch to another buffer
    "b"  'ido-switch-buffer
    "B"  'buffer-menu
    ;;"B"  'magit-blame-toggle
    "c"  'comment-dwim
    "d"  'kill-this-buffer
    "D"  'open-current-line-in-codebase-search
    "m"  'helm-imenu            ;; Jump to function in buffer
    "f"  'projectile-find-file  ;; My mapping to find a file
    "g"  'magit-status
    "h"  'fontify-and-browse    ;; HTML-ize the buffer and browse the result
    "l"  'whitespace-mode       ;; Show invisible characters
    "nn" 'air-narrow-dwim       ;; Narrow to region and enter normal mode
    "nw" 'widen
    "o"  'delete-other-windows  ;; C-w o
    "p"  'helm-show-kill-ring
    "s"  'ag-project            ;; Ag search from project's root
    "r"  'rename-file
    "R"  (lambda () (interactive) (font-lock-fontify-buffer) (redraw-display))
    "S"  'delete-trailing-whitespace
    "t"  'gtags-reindex
    "T"  'gtags-find-tag
    "w"  'save-buffer
    "x"  'helm-M-x
    "`"  'copy-file-name-to-clipboard
    "y"  'yank-to-x-clipboard)

  (defun magit-blame-toggle ()
    "Toggle magit-blame-mode on and off interactively."
    (interactive)
    (if (and (boundp 'magit-blame-mode) magit-blame-mode)
        (magit-blame-quit)
      (call-interactively 'magit-blame))))

(defun air--config-evil ()
  "Configure evil mode."

  ;; Use Emacs state in these additional modes.
  (dolist (mode '(ag-mode
                  custom-mode
                  custom-new-theme-mode
                  dired-mode
                  eshell-mode
                  flycheck-error-list-mode
                  git-rebase-mode
                  octopress-mode
                  octopress-server-mode
                  octopress-process-mode
                  org-capture-mode
                  sunshine-mode
                  term-mode))
    (add-to-list 'evil-emacs-state-modes mode))

  (delete 'term-mode evil-insert-state-modes)
  (delete 'eshell-mode evil-insert-state-modes)

  ;; Use insert state in these additional modes.
  (dolist (mode '(twittering-edit-mode
                  magit-log-edit-mode))
    (add-to-list 'evil-insert-state-modes mode))

  (add-to-list 'evil-buffer-regexps '("\\*Flycheck"))

  (evil-add-hjkl-bindings occur-mode-map 'emacs
    (kbd "/")       'evil-search-forward
    (kbd "n")       'evil-search-next
    (kbd "N")       'evil-search-previous
    (kbd "C-d")     'evil-scroll-down
    (kbd "C-u")     'evil-scroll-up
    (kbd "C-w C-w") 'other-window)

  ;; Global bindings.
  (evil-define-key 'normal global-map (kbd "<down>")  'evil-next-visual-line)
  (evil-define-key 'normal global-map (kbd "<up>")    'evil-previous-visual-line)
  (evil-define-key 'normal global-map (kbd "-")       'helm-find-files)
  (evil-define-key 'normal global-map (kbd "C--")     'air-dired-buffer-dir-or-home)
  (evil-define-key 'normal global-map (kbd "C-]")     'gtags-find-tag-from-here)
  (evil-define-key 'normal global-map (kbd "g/")      'occur-last-search)
  (evil-define-key 'normal global-map (kbd "[i")      'show-first-occurrence)
  (evil-define-key 'normal global-map (kbd "S-SPC")   'air-pop-to-org-agenda-default)
  (evil-define-key 'insert global-map (kbd "C-e")     'end-of-line) ;; I know...
  (evil-define-key 'normal global-map (kbd "C-p")     'helm-projectile)
  (evil-define-key 'normal global-map (kbd "C-S-p")   'helm-projectile-switch-project)
  (evil-define-key 'insert global-map (kbd "s-d")     'eval-last-sexp)
  (evil-define-key 'normal global-map (kbd "s-d")     'eval-defun)
  (evil-define-key 'normal global-map (kbd "C-t")     'air-open-eshell)
  (evil-define-key 'normal global-map (kbd "z d")     'dictionary-lookup-definition)
  (evil-define-key 'normal global-map (kbd "\\ \\")   'tiny-menu)
;;  (evil-define-key 'normal global-map (kbd "\\ a")    (tiny-menu-run-item "org-agendas"))
;;  (evil-define-key 'normal global-map (kbd "\\ f")    (tiny-menu-run-item "org-files"))
;;  (evil-define-key 'normal global-map (kbd "\\ t")    (tiny-menu-run-item "org-things"))
;;  (evil-define-key 'normal global-map (kbd "\\ c")    (tiny-menu-run-item "org-captures"))
;;  (evil-define-key 'normal global-map (kbd "\\ l")    (tiny-menu-run-item "org-links"))

  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

  ;; Make escape quit everything, whenever possible.
  (define-key evil-normal-state-map [escape] 'keyboard-escape-quit)
  (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (define-key evil-normal-state-map "\C-j" 'other-window)
  (define-key evil-normal-state-map "\C-h" 'other-window)
  (define-key evil-normal-state-map "\C-k" 'other-window)
  (define-key evil-normal-state-map "\C-l" 'other-window)

  ;; My own Ex commands.
  (evil-ex-define-cmd "om" 'octopress-status))

(defun air--apply-evil-other-package-configs ()
  "Apply evil-dependent settings specific to other packages."

  (defun next-conflict-marker ()
    (interactive)
    (evil-next-visual-line)
    (if (not (search-forward-regexp "\\(>>>>\\|====\\|<<<<\\)" (point-max) t))
        (evil-previous-visual-line))
    (move-beginning-of-line nil))

  (defun previous-conflict-marker ()
    (interactive)
    (search-backward-regexp "\\(>>>>\\|====\\|<<<<\\)" (point-min) t)
    (move-beginning-of-line nil))

  ;; PHP
  (evil-define-key 'normal php-mode-map (kbd "]n") 'next-conflict-marker)
  (evil-define-key 'normal php-mode-map (kbd "[n") 'previous-conflict-marker)
  (evil-define-key 'visual php-mode-map (kbd "]n") 'next-conflict-marker)
  (evil-define-key 'visual php-mode-map (kbd "[n") 'previous-conflict-marker)

  ;; Dired
  (evil-define-key 'normal dired-mode-map (kbd "C-e") 'dired-toggle-read-only))

(defmacro define-evil-or-global-key (key def &optional state)
  "Define a key KEY with DEF in an Evil map, or in the global map.
If the Evil map for STATE is defined (or `normal' if STATE is not
provided) the key will be defined in that map.  Failing that, it will
be defined globally.
Note that STATE should be provided as an unquoted symbol.
This macro provides a way to override Evil mappings in the appropriate
Evil map in a manner that is compatible with environments where Evil
is not used."
  (let* ((evil-map-name (if state
                            (concat "evil-" (symbol-name state) "-state-map")
                          "evil-normal-state-map"))
         (map (if (boundp (intern evil-map-name))
                  (intern evil-map-name)
                global-map)))
    `(define-key ,map ,key ,def)))

(use-package evil
  :ensure t
  :commands (evil-mode evil-define-key)
  :config
  (add-hook 'evil-mode-hook 'air--config-evil)
  (evil-mode 1)

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (air--config-evil-leader))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-indent-textobject
    :ensure t)

  (air--apply-evil-other-package-configs))

(provide 'init-evil)
;;; init-evil.el ends here

;;; map jk
(require 'key-chord)
(key-chord-mode 1)

;; projectile
(require 'projectile)
(projectile-mode 1)

(add-to-list 'projectile-globally-ignored-directories "vendor")
(add-to-list 'projectile-globally-ignored-directories "public")

(require 'ido)
(ido-mode 1)

(require 'flx-ido)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)

(setq evil-want-C-u-scroll t)
(require 'evil)
(evil-mode 1)

(require 'exec-path-from-shell)
(exec-path-from-shell-initialize)

(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-sve-default nil) ; stop creating #autosave# files

;; Unset alarm bell
(setq visible-bell nil) ;; The default
(setq ring-bell-function 'ignore)

(use-package ag
  :init      (setq ag-highlight-search t)
  :config    (add-to-list 'ag-arguments "-W 120"))


;; Org-mode settings
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-font-lock-mode 1)


(use-package evil-org
             :ensure t
             :after org
             :config
             (add-hook 'org-mode-hook 'evil-org-mode)
             (add-hook 'evil-org-mode-hook
                       (lambda ()
                         (evil-org-set-key-theme))))

(setq org-default-notes-file "~/working/notes/work.org")
(define-key global-map "\C-cc" 'org-capture)
(global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "~/working/notes/work.org")))

(require 'linum-relative)
(linum-relative-mode)

(global-set-key (kbd "\C-h") 'other-window)
(global-set-key (kbd "\C-l") 'other-window)

(require 'powerline)
(powerline-default-theme)
